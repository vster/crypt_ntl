// Файл GOST-main.cpp
// Контрольная реализация алгоритма ЭЦП ГОСТ Р 34.10-2012
// Выполнение контрольного примера из ГОСТ Р 34.10-2012

#include <NTL/ZZ.h>
#include <NTL/ZZ_p.h>
#include <ctime>
#include "convhex.h"
#include "QxyNTL.h"
#include "G3410-2012.h"

using namespace std;
using namespace NTL;



/*
// Curve P-256
long L = 256;
char p_dec[] =	"57896044618658097711785492504343953926634992332820282019728792003956564821041";
char p_hex[] =	"8000000000000000000000000000000000000000000000000000000000000431";

char a_dec[] =	"7";
char a_hex[] =	"7";

char b_dec[] =	"43308876546767276905765904595650931995942111794451039583252968842033849580414";
char b_hex[] =	"5FBFF498AA938CE739B8E022FBAFEF40563F6E6A3472FC2A514C0CE9DAE23B7E";

char q_dec[] =	"57896044618658097711785492504343953927082934583725450622380973592137631069619";
char q_hex[] =	"8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3";

char xp_dec[] =	"2";
char xp_hex[] =	"2";

char yp_dec[] =	"4018974056539037503335449422937059775635739389905545080690979365213431566280";
char yp_hex[] =	"8E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8";

char d_dec[] =	"55441196065363246126355624130324183196576709222340016572108097750006097525544";
char d_hex[] =	"7A929ADE789BB9BE10ED359DD39A72C11B60961F49397EEE1D19CE9891EC3B28";

char xq_dec[] =	"57520216126176808443631405023338071176630104906313632182896741342206604859403";
char xq_hex[] =	"7F2B49E270DB6D90D8595BEC458B50C58585BAlD4E9B788F6689DBD8E56FD80B";

char yq_dec[] =	"17614944419213781543809391949654080031942662045363639260709847859438286763994";
char yq_hex[] =	"26F1B489D6701DD185C8413A977B3CBBAF64D1C593D26627DFFB101A87FF77DA";

char e_dec[]  =	"20798893674476452017134061561508270130637142515379653289952617252661468872421";
char e_hex[]  =	"2DFBC1B372D89A1188C09C52E0EEC61FCE52032AB1022E8E67ECE6672B043EE5";

char k_dec[]  = "53854137677348463731403841147996619241504003434302020712960838528893196233395";
char k_hex[]  = "77105C9B20BCD3122823C8CF6FCC7B956DE33814E95B7FE64FED924594DCEAB3";
*/


// Curve P-512
long L = 512;
char p_dec[] =	"3623986102229003635907788753683874306021320925534678605086546150450856166624002482588482022271496854025090823603058735163734263822371964987228582907372403";
char p_hex[] =	"4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DF1D852741AF4704A0458047E80E4546D35B8336FAC224DD81664BBF528BE6373";

char a_dec[] =	"7";
char a_hex[] =	"7";

char b_dec[] =	"1518655069210828534508950034714043154928747527740206436194018823352809982443793732829756914785974674866041605397883677596626326413990136959047435811826396";
char b_hex[] =	"1CFF0806A31116DA29D8CFA54E57EB748BC5F377E49400FDD788B649ECA1AC4361834013B2AD7322480A89CA58E0CF74BC9E540C2ADD6897FAD0A3084F302ADC";

char q_dec[] =	"3623986102229003635907788753683874306021320925534678605086546150450856166623969164898305032863068499961404079437936585455865192212970734808812618120619743";
char q_hex[] =	"4531ACD1FE0023C7550D267B6B2FEE80922B14B2FFB90F04D4EB7C09B5D2D15DA82F2D7ECB1DBAC719905C5EECC423F1D86E25EDBE23C595D644AAF187E6E6DF";

char xp_dec[] =	"1928356944067022849399309401243137598997786635459507974357075491307766592685835441065557681003184874819658004903212332884252335830250729527632383493573274";
char xp_hex[] =	"24D19CC64572EE30F396BF6EBBFD7A6C5213B3B3D7057CC825F91093A68CD762FD60611262CD838DC6B60AA7EEE804E28BC849977FAC33B4B530F1B120248A9A";

char yp_dec[] =	"2288728693371972859970012155529478416353562327329506180314497425931102860301572814141997072271708807066593850650334152381857347798885864807605098724013854";
char yp_hex[] =	"2BB312A43BD2CE6E0D020613C857ACDDCFBF061E91E5F2C3F32447C259F39B2C83AB156D77F1496BF7EB3351E1EE4E43DC1A18B91B24640B6DBB92CB1ADD371E";

char d_dec[] =	"610081804136373098219538153239847583006845519069531562982388135354890606301782255383608393423372379057665527595116827307025046458837440766121180466875860";
char d_hex[] =	"BA6048AADAE241BA40936D47756D7C93091A0E8514669700EE7508E508B102072E8123B2200A0563322DAD2827E2714A2636B7BFD18AADFC62967821FA18DD4";

char xq_dec[] =	"909546853002536596556690768669830310006929272546556281596372965370312498563182320436892870052842808608262832456858223580713780290717986855863433431150561";
char xq_hex[] =	"115DC5BC96760C7B48598D8AB9E740D4C4A85A65BE33C1815B5C320C854621DD5A515856D13314AF69BC5B924C8B4DDFF75C45415C1D9DD9DD33612CD530EFE1";

char yq_dec[] =	"2921457203374425620632449734248415455640700823559488705164895837509539134297327397380287741428246088626609329139441895016863758984106326600572476822372076";
char yq_hex[] =	"37C7C90CD40B0F5621DC3AC1B751CFA0E2634FA0503B3D52639F5D7FB72AFD61EA199441D943FFE7F0C70A2759A3CDB84C114E1F9339FDF27F35ECA93677BEEC";

char e_dec[]  =	"2897963881682868575562827278553865049173745197871825199562947419041388950970536661109553499954248733088719748844538964641281654463513296973827706272045964";
char e_hex[]  =	"3754F3CFACC9E0615C4F4A7C4D8DAB531B09B6F9C170C533A71D147035B0C5917184EE536593F4414339976C647C5D5A407ADEDB1D560C4FC6777D2972075B8C";

char k_dec[]  =	"175516356025850499540628279921125280333451031747737791650208144243182057075034446102986750962508909227235866126872473516807810541747529710309879958632945";
char k_hex[]  =	"359E7F4B1410FEACC570456C6801496946312120B39D019D455986E364F365886748ED7A44B3E794434006011842286212273A6D14CF70EA3AF71BB1AE679F1";


ZZ p;
ZZ a;
ZZ b;

//======================================
void line()
{
    cout << endl;
    for (int i = 0; i < 79; i++) cout << "=";
    cout << endl;
}

int main()
{
    ZZ q;
    ZZ bpn;

    p.SetSize(L);
    b.SetSize(L);

    //======================================
    line();

    cout << "\nDomain parameters:\n";
    p = conv<ZZ> (p_dec);
    cout << "\np (dec) = \n" << p << endl;
    cout << "\np (hex) = \n";
    show_dec_in_hex (p, L);
    cout << endl;

    a = conv<ZZ> (a_dec);
    cout << "\na (dec) = \n" << a << endl;
    cout << "\na (hex) = \n";
    show_dec_in_hex (a, L);
    cout << endl;

    b = conv<ZZ> (b_dec);
    cout << "\nb (dec) = \n" << b << endl;
    cout << "\nb (hex) = \n";
    show_dec_in_hex (b, L);
    cout << endl;

    q = conv<ZZ> (q_dec);
    cout << "\nq (dec) = \n" << q << endl;
    cout << "\nq (hex) = \n";
    show_dec_in_hex (q, L);
    cout << endl;


    ZZ_p::init(p);

    Qxy P;
    ZZ xp;
    ZZ yp;
    xp = conv<ZZ>(xp_dec);
    yp = conv<ZZ>(yp_dec);

    P.getQxy(xp, yp);

    cout << "\nBase point P:\n";
    P.putQxy();
    cout << endl;

    //======================================
    line();


    // Тест параметров ЭК
    // testparams ( P, q );

    //======================================
    //line();

    // Генерация ключей
    cout << "\nSignature and verification keys.\n";
    ZZ d;				// Ключ	подписи 1 < d < q-1
    Qxy Q;				// Ключ проверки
    Qxy Qt;				// Проверка генерации открытого ключа
    ZZ xq, yq;
    d = conv<ZZ>(d_dec);
    xq = conv<ZZ>(xq_dec);
    yq = conv<ZZ>(yq_dec);
    Qt.getQxy(xq, yq);

    genkeys ( d, Q, P, q );

    cout << endl;
    if ( Q == Qt )
        cout << "Generation of verification key is OK.";
    else
        cout << "Generation of verification key is FAILD.";
    cout << endl;

    //======================================
    line();

    // Генерация ЭЦП

    cout << "\nSignature process.\n";

    ZZ e;
    e =conv<ZZ>(e_dec);
    if ( e == 0 )
        e = 1;

    cout << "\nHash-code e:\n";
    cout << "\ne (dec) = \n" << e << endl;
    cout << "\ne (hex) = \n";
    show_dec_in_hex (e, L);
    cout << endl;

    ZZ r, s, k;
    k =conv<ZZ>(k_dec);

    gensign ( r, s, k, e, d, P, q );

    //======================================
    line();

    // Проверка ЭЦП
    cout << "\nVerification process.\n";
    ZZ R;
    verifysign ( R, r, s, e, Q, P, q  );

    //======================================
    line();

    return 0;
}
